{"version":3,"file":"static/js/633.95d8df80.chunk.js","mappings":"0NAEaA,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAaA,OACE,kBAAMC,OAAO,GAAGJ,SAPO,SAAAK,GACvBA,EAAEC,iBACFN,EAASE,GACTC,EAAS,GACV,EAGC,WACE,kBAAOI,QAAQ,GAAf,UACE,kBACEC,KAAK,OACLC,MAAOP,EACPQ,SAjBkB,SAAAL,GACxB,IAAQI,EAAUJ,EAAEM,cAAZF,MACRN,EAASM,EACV,EAeOG,KAAK,aAIT,mBAAQJ,KAAK,SAAb,sBAGL,E,SC1BYK,EAAY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,OAKpBC,GALyC,EAAbC,QAKjBC,EAAAA,EAAAA,OAGjB,OAFAC,QAAQC,IAAIJ,IAGV,wBACGD,EAAOM,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAID,EAAME,GAAK,GAAIC,MAAO,CAAEC,KAAMV,GAAxC,SACGM,EAAMK,SAFFL,EAAME,GADA,KAStB,E,SCYD,EA5BkB,WAChB,OAA4BtB,EAAAA,EAAAA,UAAS,MAArC,eAAOa,EAAP,KAAea,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAM7B,EAAQ2B,EAAaG,IAAI,UAC/Bd,QAAQC,IAAIjB,GACPA,IAIL+B,EAAAA,EAAAA,IAAkB/B,GAAOgC,KAAKP,EAC/B,GAAE,CAACE,IAQJ,OACE,iCACE,SAAC9B,EAAD,CAAWC,SARM,SAAAS,GACnB,IAAMP,EAAQO,EAAM0B,cAAcC,OAC7BlC,GACL4B,EAAgB,CAAEd,OAAQd,GAC3B,IAKIY,IAAU,SAACD,EAAD,CAAWC,OAAQA,MAGnC,C,sIC/BKuB,E,OAAUC,EAAAA,OAAa,CAAEC,QAAS,iCAY3BN,EAAiB,mCAAG,WAAM/B,GAAN,yFACRmC,EAAQL,IAAI,gBAAiB,CAClDQ,OAAQ,CACNC,QAAS,mCACTvC,MAAAA,KAJ2B,uBACvBwC,EADuB,EACvBA,KADuB,kBAQxBA,EAAKC,SARmB,2CAAH,sDAWjBC,EAAc,mCAAG,WAAOrB,GAAP,4FAAWf,EAAX,+BAAkB,GAAlB,SACR6B,EAAQL,IAAI,UAAYT,EAAKf,EAAM,CACrDgC,OAAQ,CACNC,QAAS,sCAHe,cACtBpB,EADsB,yBAOrBA,EAAMqB,MAPe,2CAAH,sDAUdG,EAAmB,mCAAG,oGACZR,EAAQL,IAAI,sBAAuB,CACtDQ,OAAQ,CACNC,QAAS,sCAHoB,cAC3B3B,EAD2B,yBAO1BA,EAAO4B,KAAKC,SAPc,2CAAH,oD","sources":["components/Searchbar/Searchbar.jsx","components/MovieList/MovieList.jsx","pages/Movies/MoviePage.jsx","services/tmdb.service.js"],"sourcesContent":["import { useState } from 'react';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleIтputChange = e => {\n    const { value } = e.currentTarget;\n    setQuery(value);\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <form action=\"\" onSubmit={handleFormSubmit}>\n      <label htmlFor=\"\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={handleIтputChange}\n          name=\"query\"\n        />\n      </label>\n\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n","import { Link, useLocation } from 'react-router-dom';\n// import { useParams } from 'react-router-dom';\n// import { useSearchParams } from 'react-router-dom';\n\nexport const MovieList = ({ movies, search }) => {\n  // const link = useParams();\n  // console.log(link);\n\n  // console.log(search.get('search'))\n  const location = useLocation();\n  console.log(location);\n\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={movie.id + ''} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { fetchMoviesByName } from 'services/tmdb.service';\n\nconst MoviePage = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('search');\n    console.log(query);\n    if (!query) {\n      return;\n    }\n\n    fetchMoviesByName(query).then(setMovies);\n  }, [searchParams]);\n\n  const handleSubmit = value => {\n    const query = value.toLowerCase().trim();\n    if (!query) return;\n    setSearchParams({ search: query });\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={handleSubmit} />\n      {movies && <MovieList movies={movies} />}\n    </>\n  );\n};\n\nexport default MoviePage;\n","import axios from 'axios';\n\nconst tmdbAPI = axios.create({ baseURL: 'https://api.themoviedb.org/3' });\n\n// export const fetchMovies = async type => {\n//   const { data } = await tmdbAPI.get(type, {\n//     params: {\n//       api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n//     },\n//   });\n\n//   console.log(data);\n// };\n\nexport const fetchMoviesByName = async query => {\n  const { data } = await tmdbAPI.get('/search/movie', {\n    params: {\n      api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const fetchMovieById = async (id, type = '') => {\n  const movie = await tmdbAPI.get('/movie/' + id + type, {\n    params: {\n      api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n    },\n  });\n\n  return movie.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const movies = await tmdbAPI.get('/trending/movie/day', { \n    params: {\n      api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n    },\n  });\n\n  return movies.data.results;\n};\n"],"names":["Searchbar","onSubmit","useState","query","setQuery","action","e","preventDefault","htmlFor","type","value","onChange","currentTarget","name","MovieList","movies","location","search","useLocation","console","log","map","movie","to","id","state","from","title","setMovies","useSearchParams","searchParams","setSearchParams","useEffect","get","fetchMoviesByName","then","toLowerCase","trim","tmdbAPI","axios","baseURL","params","api_key","data","results","fetchMovieById","fetchTrendingMovies"],"sourceRoot":""}