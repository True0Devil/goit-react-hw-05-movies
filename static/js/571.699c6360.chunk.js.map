{"version":3,"file":"static/js/571.699c6360.chunk.js","mappings":"4JAqBA,IAnBe,WACb,OACE,gBAAKA,UAAU,gCAAf,UACE,SAAC,KAAD,CACEC,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,iBAAiB,GACjBC,iBAAiB,GACjBC,SAAS,GACTC,UAAU,8BAIjB,C,+FCsED,UAnFoB,WAAO,IAAD,YACxB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAOjB,IAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeL,GAASM,KAAKP,EAC9B,GAAE,CAACC,IAECF,EAIL,OACE,6BACE,mBAAQZ,UAAU,iCAAiCqB,KAAK,SAAxD,UACE,SAAC,KAAD,CACEC,GAAE,oBAAEN,EAASO,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAC5BxB,UAAU,4BAFZ,qBAQF,qBAASA,UAAU,mBAAnB,WACE,gBACEyB,IAAG,0CAAqCb,EAAMc,aAC9CC,IAAI,MAEN,iBAAK3B,UAAU,OAAf,WACE,0BACGY,EAAMgB,MADT,eACkBhB,EAAMiB,oBADxB,aACkB,EAAoBC,MAAM,EAAG,GAD/C,QAGA,yCACc,0BAA0B,GAArBlB,EAAMmB,cAAmBC,QAAQ,GAAtC,WAGd,sCACA,uBAAIpB,EAAMqB,YAEV,oCACA,eAAIjC,UAAU,0BAAd,mBACGY,EAAMsB,cADT,aACG,EAAcC,KAAI,SAAAC,GAAK,OACtB,eAAmBpC,UAAU,gCAA7B,SACGoC,EAAMC,MADAD,EAAME,GADO,aAS9B,qBAAStC,UAAU,OAAnB,WACE,oDACA,gBAAIA,UAAU,aAAd,WACE,eAAIA,UAAU,qCAAd,UACE,SAAC,KAAD,CACEsB,GAAG,OACHtB,UAAU,uBACVuB,MAAO,CAAEC,KAAI,UAAER,EAASO,aAAX,aAAE,EAAgBC,MAHjC,qBAQF,eAAIxB,UAAU,qCAAd,UACE,SAAC,KAAD,CACEsB,GAAG,UACHtB,UAAU,uBACVuB,MAAO,CAAEC,KAAI,UAAER,EAASO,aAAX,aAAE,EAAgBC,MAHjC,2BAUJ,SAAC,EAAAe,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,WAKT,C,sICrFKC,E,OAAUC,EAAAA,OAAa,CAAEC,QAAS,iCAY3BC,EAAiB,mCAAG,WAAMC,GAAN,yFACRJ,EAAQK,IAAI,gBAAiB,CAClDC,OAAQ,CACNC,QAAS,mCACTH,MAAAA,KAJ2B,uBACvBI,EADuB,EACvBA,KADuB,kBAQxBA,EAAKC,SARmB,2CAAH,sDAWjB/B,EAAc,mCAAG,WAAOmB,GAAP,4FAAWjB,EAAX,+BAAkB,GAAlB,SACRoB,EAAQK,IAAI,UAAYR,EAAKjB,EAAM,CACrD0B,OAAQ,CACNC,QAAS,sCAHe,cACtBpC,EADsB,yBAOrBA,EAAMqC,MAPe,2CAAH,sDAUdE,EAAmB,mCAAG,oGACZV,EAAQK,IAAI,sBAAuB,CACtDC,OAAQ,CACNC,QAAS,sCAHoB,cAC3BI,EAD2B,yBAO1BA,EAAOH,KAAKC,SAPc,2CAAH,oD","sources":["components/Loader/Loader.jsx","pages/SingleMovie/SingleMovie.jsx","services/tmdb.service.js"],"sourcesContent":["import { CirclesWithBar } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <CirclesWithBar\n        height=\"100\"\n        width=\"100\"\n        color=\"#4fa94d\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        outerCircleColor=\"\"\n        innerCircleColor=\"\"\n        barColor=\"\"\n        ariaLabel=\"circles-with-bar-loading\"\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import Loader from 'components/Loader/Loader';\nimport { useState, useEffect, Suspense } from 'react';\nimport { useLocation, useParams, Link, Outlet } from 'react-router-dom';\n\nimport { fetchMovieById } from 'services/tmdb.service';\n\nconst SingleMovie = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieID } = useParams();\n  const location = useLocation();\n\n\n  useEffect(() => {\n    fetchMovieById(movieID).then(setMovie);\n  }, [movieID]);\n\n  if (!movie) {\n    return;\n  }\n\n  return (\n    <main>\n      <button className=\"d-block p-0 border-0 ms-3 mb-4\" type=\"button\">\n        <Link\n          to={location.state?.from ?? '/'}\n          className=\"btn btn-primary py-2 px-3\"\n        >\n          Back\n        </Link>\n      </button>\n\n      <section className=\"d-flex ms-3 mb-4\">\n        <img\n          src={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n          alt=\"\"\n        />\n        <div className=\"ms-5\">\n          <h1>\n            {movie.title} ({movie.release_date?.slice(0, 4)})\n          </h1>\n          <p>\n            User Score: <b>{(movie.vote_average * 10).toFixed(1)}%</b>\n          </p>\n\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n\n          <h3>Genres</h3>\n          <ul className=\"list-group flex-row p-0\">\n            {movie.genres?.map(genre => (\n              <li key={genre.id} className=\"list-group-item border-0 ps-0\">\n                {genre.name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </section>\n\n      <section className=\"ms-4\">\n        <h4>Additional information</h4>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item border-0 ps-0 fs-4\">\n            <Link\n              to=\"cast\"\n              className=\"text-decoration-none\"\n              state={{ from: location.state?.from }}\n            >\n              Cast\n            </Link>\n          </li>\n          <li className=\"list-group-item border-0 ps-0 fs-4\">\n            <Link\n              to=\"reviews\"\n              className=\"text-decoration-none\"\n              state={{ from: location.state?.from }}\n            >\n              Reviews\n            </Link>\n          </li>\n        </ul>\n\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </section>\n    </main>\n  );\n};\n\nexport default SingleMovie;\n","import axios from 'axios';\n\nconst tmdbAPI = axios.create({ baseURL: 'https://api.themoviedb.org/3' });\n\n// export const fetchMovies = async type => {\n//   const { data } = await tmdbAPI.get(type, {\n//     params: {\n//       api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n//     },\n//   });\n\n//   console.log(data);\n// };\n\nexport const fetchMoviesByName = async query => {\n  const { data } = await tmdbAPI.get('/search/movie', {\n    params: {\n      api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const fetchMovieById = async (id, type = '') => {\n  const movie = await tmdbAPI.get('/movie/' + id + type, {\n    params: {\n      api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n    },\n  });\n\n  return movie.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const movies = await tmdbAPI.get('/trending/movie/day', { \n    params: {\n      api_key: '94b41ec0e6f6b6ffeb7ae80dc6b59179',\n    },\n  });\n\n  return movies.data.results;\n};\n"],"names":["className","height","width","color","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","useState","movie","setMovie","movieID","useParams","location","useLocation","useEffect","fetchMovieById","then","type","to","state","from","src","poster_path","alt","title","release_date","slice","vote_average","toFixed","overview","genres","map","genre","name","id","Suspense","fallback","tmdbAPI","axios","baseURL","fetchMoviesByName","query","get","params","api_key","data","results","fetchTrendingMovies","movies"],"sourceRoot":""}